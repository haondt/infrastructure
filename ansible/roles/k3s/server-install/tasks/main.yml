---
- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: not ansible_check_mode and k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download artifact
  when: not ansible_check_mode and ( k3s_version_output.rc != 0 or installed_k3s_version is version(k3s_version, '<') )
  block:
    - name: Download K3s install script
      ansible.builtin.get_url:
        url: https://get.k3s.io/
        timeout: 120
        dest: /usr/local/bin/k3s-install.sh
        owner: root
        group: root
        mode: "0755"

    - name: Download K3s binary (without node name)
      when: k3s_node_name is not defined
      ansible.builtin.command: &k3s_install_cmd
        cmd: /usr/local/bin/k3s-install.sh
      environment: &k3s_install_env
        INSTALL_K3S_SKIP_START: "true"
        INSTALL_K3S_VERSION: "{{ k3s_version }}"
      changed_when: true

    - name: Download K3s binary (with node name)
      when: k3s_node_name is defined
      ansible.builtin.command: *k3s_install_cmd
      environment:
        <<: *k3s_install_env
        K3S_NODE_NAME: "{{ k3s_node_name }}"
      changed_when: true

- name: Add K3s autocomplete to user bashrc
  when: ansible_user is defined
  ansible.builtin.lineinfile:
    path: "~{{ ansible_user }}/.bashrc"
    regexp: '\.\s+<\(k3s completion bash\)'
    line: ". <(k3s completion bash)  # Added by k3s-ansible"

- name: Setup optional config file
  when: k3s_server_config_yaml is defined
  block:
    - name: Make config directory
      ansible.builtin.file:
        path: "/etc/rancher/k3s"
        mode: "0755"
        state: directory
    - name: Copy config values
      ansible.builtin.copy:
        content: "{{ k3s_server_config_yaml }}"
        dest: "/etc/rancher/k3s/config.yaml"
        mode: "0644"
      register: _server_config_result

- name: Init first server node
  when: inventory_hostname == groups[target_hosts][0] or ansible_host == groups[target_hosts][0]
  block:
    - name: Copy K3s service file [Single]
      when: groups[target_hosts] | length == 1 or k3s_use_external_database
      ansible.builtin.template:
        src: "k3s-single.service.j2"
        dest: "{{ k3s_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: service_file_single

    - name: Copy K3s service file [HA]
      when:
        - groups[target_hosts] | length > 1
        - not k3s_use_external_database
      ansible.builtin.template:
        src: "k3s-cluster-init.service.j2"
        dest: "{{ k3s_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: service_file_ha

    - name: Add service environment variables
      when: k3s_extra_service_envs is defined
      ansible.builtin.lineinfile:
        path: "{{ k3s_systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ k3s_extra_service_envs }}"

    - name: Delete any existing token from the environment if different from the new one
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ k3s_systemd_dir }}/k3s.service.env"
        regexp: "^K3S_TOKEN=\\s*(?!{{ k3s_token | default('') | regex_escape }}\\s*$)"

    # Add the token to the environment if it has been provided.
    # Otherwise, let the first server create one on the first run.
    - name: Add token as an environment variable
      no_log: true # avoid logging the server token
      ansible.builtin.lineinfile:
        path: "{{ k3s_systemd_dir }}/k3s.service.env"
        line: "K3S_TOKEN={{ k3s_token }}"
      when: k3s_token is defined

    - name: Restart K3s service
      when:
        - ansible_facts.services['k3s.service'] is defined
        - ansible_facts.services['k3s.service'].state == 'running'
        - service_file_single.changed or service_file_ha.changed or _server_config_result.changed
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: restarted

    - name: Enable and check K3s service
      when: ansible_facts.services['k3s.service'] is not defined or ansible_facts.services['k3s.service'].state != 'running'
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Pause to allow first server startup
      when: (groups[target_hosts] | length) > 1
      ansible.builtin.pause:
        seconds: 10

    - name: Check whether kubectl is installed on control node
      ansible.builtin.command: 'kubectl'
      register: kubectl_installed
      ignore_errors: true
      delegate_to: 127.0.0.1
      become: false
      changed_when: false

    # Copy the k3s config to a second file to detect changes.
    # If no changes are found, we can skip copying the kubeconfig to the control node.
    - name: Copy k3s.yaml to second file
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /etc/rancher/k3s/k3s-copy.yaml
        mode: "0600"
        remote_src: true
      register: copy_k3s_yaml_file

    - name: Apply K3S kubeconfig to control node
      when:
        - kubectl_installed.rc == 0
        - copy_k3s_yaml_file.changed
      block:
        - name: Copy kubeconfig to control node
          ansible.builtin.fetch:
            src: /etc/rancher/k3s/k3s.yaml
            dest: "{{ k3s_kubeconfig }}"
            flat: true

        - name: Change server address in kubeconfig on control node
          ansible.builtin.shell: |
            KUBECONFIG={{ k3s_kubeconfig }} kubectl config set-cluster default --server=https://{{ k3s_api_endpoint }}:{{ k3s_api_port }}
          delegate_to: 127.0.0.1
          become: false
          register: csa_result
          changed_when:
            - csa_result.rc == 0

        - name: Setup kubeconfig context on control node - {{ k3s_cluster_context }}
          when: k3s_kubeconfig == "~/.kube/config.new"
          ansible.builtin.replace:
            path: "{{ k3s_kubeconfig }}"
            regexp: 'default'
            replace: '{{ k3s_cluster_context }}'
          delegate_to: 127.0.0.1
          become: false

        - name: Merge with any existing kubeconfig on control node
          when: k3s_kubeconfig == "~/.kube/config.new"
          ansible.builtin.shell: |
            TFILE=$(mktemp)
            KUBECONFIG={{ k3s_kubeconfig }}:~/.kube/config kubectl config set-context {{ k3s_cluster_context }} --user={{ k3s_cluster_context }} --cluster={{ k3s_cluster_context }}
            KUBECONFIG={{ k3s_kubeconfig }}:~/.kube/config kubectl config view --flatten > ${TFILE}
            mv ${TFILE} ~/.kube/config
          delegate_to: 127.0.0.1
          become: false
          register: mv_result
          changed_when:
            - mv_result.rc == 0

    - name: Get the token if randomly generated
      when: k3s_token is not defined
      block:
        - name: Wait for token
          ansible.builtin.wait_for:
            path: /var/lib/rancher/k3s/server/token

        - name: Read node-token from master
          ansible.builtin.slurp:
            src: /var/lib/rancher/k3s/server/token
          register: node_token

        - name: Store Master node-token
          ansible.builtin.set_fact:
            k3s_token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Start other server if any and verify status
  when:
    - (groups[target_hosts] | length) > 1
    - inventory_hostname != groups[target_hosts][0] and ansible_host != groups[target_hosts][0]
  block:
    - name: Get the token from the first server
      ansible.builtin.set_fact:
        k3s_token: "{{ hostvars[groups[target_hosts][0]].k3s_token }}"

    - name: Add service environment variables
      when: k3s_extra_service_envs is defined
      ansible.builtin.lineinfile:
        path: "{{ k3s_systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items: "{{ k3s_extra_service_envs }}"

    - name: Delete any existing token from the environment if different from the new one
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ k3s_systemd_dir }}/k3s.service.env"
        regexp: "^K3S_TOKEN=\\s*(?!{{ k3s_token }}\\s*$)"

    - name: Add the token for joining the cluster to the environment
      no_log: true # avoid logging the server token
      ansible.builtin.lineinfile:
        path: "{{ k3s_systemd_dir }}/k3s.service.env"
        line: "{{ item }}"
      with_items:
        - "K3S_TOKEN={{ k3s_token }}"

    - name: Copy K3s service file [HA]
      when: not k3s_use_external_database
      ansible.builtin.template:
        src: "k3s-ha.service.j2"
        dest: "{{ k3s_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: service_file_ha

    - name: Copy K3s service file [External DB]
      when: k3s_use_external_database
      ansible.builtin.template:
        src: "k3s-single.service.j2"
        dest: "{{ k3s_systemd_dir }}/k3s.service"
        owner: root
        group: root
        mode: "0644"
      register: service_file_external_db

    - name: Restart K3s service
      when:
        - ansible_facts.services['k3s.service'] is defined
        - ansible_facts.services['k3s.service'].state == 'running'
        - service_file_ha.changed or service_file_external_db.changed or _server_config_result.changed
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: restarted

    - name: Enable and check K3s service
      when: ansible_facts.services['k3s.service'] is not defined or ansible_facts.services['k3s.service'].state != 'running'
      ansible.builtin.systemd:
        name: k3s
        daemon_reload: true
        state: started
        enabled: true

    - name: Verify that all server nodes joined
      when: not ansible_check_mode and (groups[target_hosts] | length) > 1
      ansible.builtin.command:
        cmd: >
          k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups[target_hosts] | length)
      retries: 20
      delay: 10
      changed_when: false

- name: Setup kubectl for user
  when: k3s_user_kubectl
  block:

    - name: Create directory .kube
      ansible.builtin.file:
        path: ~{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        mode: "u=rwx,g=rx,o="

    - name: Copy config file to user home directory
      ansible.builtin.copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ~{{ ansible_user }}/.kube/config
        remote_src: true
        owner: "{{ ansible_user }}"
        mode: "u=rw,g=,o="

    - name: Configure default KUBECONFIG for user
      ansible.builtin.lineinfile:
        path: ~{{ ansible_user }}/.bashrc
        regexp: 'export KUBECONFIG=~/.kube/config'
        line: 'export KUBECONFIG=~/.kube/config # Added by k3s-ansible'
        state: present

    - name: Configure kubectl autocomplete
      ansible.builtin.lineinfile:
        path: ~{{ ansible_user }}/.bashrc
        regexp: '\.\s+<\(kubectl completion bash\)'
        line: ". <(kubectl completion bash)  # Added by k3s-ansible"
