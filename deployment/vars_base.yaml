SHARED:
  default:
    pod_cidr: &default_pod_cidr 10.42.0.0/16
  marble:
    cluster_ip: &marble_cluster_ip 192.168.1.100
    ingress_ip: &marble_ingress_ip 192.168.1.101
    load_balancer_ip_range: &load_balancer_ip_range 192.168.1.101-192.168.1.110
    pod_cidr: &marble_pod_cidr 10.42.0.0/16
  basalt:
    cluster_ip: &basalt_cluster_ip 192.168.1.139
    load_balancer_ip_range: &basalt_lb_ip_range 192.168.1.201-192.168.1.205
  gabbro:
    cluster_ip: &gabbro_cluster_ip 192.168.1.78
    load_balancer_ip_range: &gabbro_lb_ip_range 192.168.1.211-192.168.1.215


terraform:
  default:
    backend_config: &tf_backend
      address: https://gitlab.com/api/v4/projects/68409780/terraform/state/default
      lock_address: https://gitlab.com/api/v4/projects/68409780/terraform/state/default/lock
      unlock_address: https://gitlab.com/api/v4/projects/68409780/terraform/state/default/lock
      lock_method: POST
      unlock_method: DELETE
      retry_wait_min: 5
    tfvars:
      cloudflare:
        domains:
          haondt.dev:
            records:
              - name: glance
                type: A
                proxied: true
                content: {{ VARIABLES.chert_ip }}
              - name: status
                type: A
                proxied: true
                content: {{ VARIABLES.chert_ip }}

  clusters:
    backend_config:
      <<: *tf_backend
      address: https://gitlab.com/api/v4/projects/68409780/terraform/state/clusters
      lock_address: https://gitlab.com/api/v4/projects/68409780/terraform/state/clusters/lock
      unlock_address: https://gitlab.com/api/v4/projects/68409780/terraform/state/clusters/lock
    tfvars:
      clusters:
        marble:
          cluster_ip: *marble_cluster_ip
          service_accounts:
            gitlab-deployments-marble:
            roles:
              - deployer

ssh:
  public_keys: &public_keys
    - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINjSDZ49g0G2wpeTUe66hT5/bNlHt37Z+gEg7JZf/67f haondt@aurora
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCtq8bQGdUwr0YNSVXvZMfpJyl50tiiP61aVWxQsWOOi8QQBTV6GkZqcSIMIyiS3IKbP8sOkNmUFZsTjUibXlHW4OI2V9FF6b/oAxuKuAFYdx0HHFyWmuOkAvZBOjAEw782l9/tq8zgs5HXyqP1GizqenpcTk0LF8QavAUnwpzCdrBJF8ZE5Ih3elyceVw0PVxID9C/Dg6Ts/0IkN+rSpo3vagBRZIf0yFddW3nu7ONmEF93ZEAuSWK+nvN2PCuGq2q11dIu53VgDKwluF46uqeCAQNQfrIKYzyFeb+qRj9E5YO8ZdVWXmVM3+Qkw6o2DLReZgBBIe6i3i0Xdv3mCV5lMR1zNXd5u4VyPXvo1tl5lNvrFSrPxfvQVPKS8Ow9SRjb56lYMenTMaSJ7RhOOigeUvx6/WVltEGmgDRcyNQww9S55GQFx+rAq9VZSutm/hnV917C4jrgfAvSeE8hRxxLdX8YopOhioqaK1fsfD0HUtHpncxaQwNnFD3il2hkpRkBcpt7W44mjxb/A3/hf80XVafEVVuBVEc2E5DK2hrAJBWfWm+BjnywwLzxQmJJNG1E5OjwE2eOVqsZr/XyVCv6Zz/JnOOr27WxdVj+SKzIkm8ER0BuI1DQFxICCA8Lv9VsXmEjP8sHWIsYHHKdggEcqci0DOgYmzTtX9aZ7VCoQ== haondt@ansible

ansible:
  inventory:
    k3s_clusters:
      children:
        marble:
          hosts:
            marble-1:
              ansible_host: 192.168.1.131
              storage:
                - by_path: /dev/disk/by-path/pci-0000:00:17.0-ata-1
                  mount: /mnt/okra
            marble-2:
              ansible_host: 192.168.1.175
              storage:
                - by_path: /dev/disk/by-path/pci-0000:00:17.0-ata-1
                  mount: /mnt/okra
            marble-3:
              ansible_host: 192.168.1.149
              storage:
                - by_path: /dev/disk/by-path/pci-0000:00:17.0-ata-1
                  mount: /mnt/okra
          vars:
            ansible_user: marble
            ansible_ssh_private_key_file: build/id_rsa
            k3s_version: v1.33.3+k3s1
            k3s_node_name: "{% raw %}{{ inventory_hostname }}{% endraw %}"
            k3s_node_ip: "{% raw %}{{ ansible_host }}{% endraw %}"
            k3s_cluster_ip:  *marble_cluster_ip
            k3s_pod_cidr: *marble_pod_cidr
            k3s_cluster_control_plane_ip: "{% raw %}{{ k3s_cluster_ip }}{% endraw %}"
            k3s_server_config_yaml: |
              {% raw %}
              node-ip: "{{ ansible_host }}"
              disable: servicelb,traefik
              flannel-backend: none
              disable-network-policy: true
              disable-cloud-controller: true
              cluster-cidr: "{{ k3s_pod_cidr }}"
              tls-san:
                - "{{ k3s_cluster_control_plane_ip }}"
              kubelet-arg: "allowed-unsafe-sysctls=net.ipv4.*,net.ipv6.*"
              {% endraw %}
            k3s_extra_server_args: "--secrets-encryption"
            kubernetes:
              kubeconfig: "~/.kube/config"
              cluster_name: marble
              context: marble
              cluster_ip: *marble_cluster_ip
              calico:
                enabled: true
                pod_cidr: *marble_pod_cidr
              metallb:
                enabled: true
                ip_address_pool:
                  global:
                    - *load_balancer_ip_range
              kube_vip_cloud_controller:
                enabled: false
                ip_address_ranges:
                  global:
                    range: *load_balancer_ip_range
              ingress_nginx:
                load_balancer_ip: *marble_ingress_ip
                enabled: true
                node_port:
                  enabled: false
                  http: 30080
                  https: 30443
              cert_manager:
                enabled: true
                certificates:
                  haondt-dev-default:
                    dns_names: ['*.marble.local.haondt.dev', '*.haondt.dev']
              longhorn:
                enabled: true
                default_data_path: /mnt/okra/longhorn
                storage_classes:
                  longhorn-default: {}
              rathole:
                enabled: true
                version: rathole-operator/v0.0.3
                # controller_image: registry.gitlab.com/haondt/cicd/registry/rathole-controller:main-6ead3ef4
                servers:
                  chert:
                    services:
                      haondt: {}
                  aeeo:
                    services:
                      haondt: {}
              alloy:
                enabled: true
                node_exporter:
                  enabled: true
                  mounts:
                    okra: /mnt/okra
                config_controller:
                  enabled: true
                  # controller_image: registry.gitlab.com/haondt/cicd/registry/alloy-config-controller:main-319a7250
                  version: alloy-config-controller/v0.0.1
                version: v1.2.1
                base_config: |
                  prometheus.remote_write "mimir" {
                    endpoint {
                      url = "https://mimir.basalt.local.haondt.dev/api/v1/push"
                    }
                    external_labels = {
                      dev_haondt_cluster = "marble",
                    }
                  }

                  loki.write "default" {
                    endpoint {
                      url = "https://loki.basalt.local.haondt.dev/loki/api/v1/push"
                    }
                    external_labels = {
                      dev_haondt_cluster = "marble",
                    }
                  }


                  // k8s nodes
                  discovery.kubernetes "nodes" {
                    role = "node"
                    selectors {
                      role = "node"
                      field = "metadata.name=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
                    }
                  }

                  prometheus.scrape "nodes" {
                    targets = discovery.kubernetes.nodes.targets
                    scheme = "https"
    
                    tls_config {
                      insecure_skip_verify = true
                    }
                    
                    authorization {
                      credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                    }
                    
                    job_name = "kubelet"
                    metrics_path = "/metrics/resource"
                    forward_to = [prometheus.remote_write.mimir.receiver]
                  }

                  // node-exporter
                  prometheus.exporter.unix "node_exporter" {
                    set_collectors = [
                      "cpu",
                      "meminfo",
                      "diskstats",
                      "filesystem",
                      "time",
                      "stat",
                    ]
                  }
                  prometheus.scrape "node_exporter" {
                    targets = prometheus.exporter.unix.node_exporter.targets
                    forward_to = [prometheus.remote_write.mimir.receiver]
                  }

                  // pod logs
                  discovery.kubernetes "pod_logs" {
                    role = "pod"
                    selectors {
                      role = "pod"
                      field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
                    }
                  }

                  discovery.relabel "pod_logs" {
                    targets = discovery.kubernetes.pod_logs.targets
                    rule {
                      source_labels = ["__meta_kubernetes_namespace"]
                      action = "replace"
                      target_label = "dev_haondt_namespace"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_name"]
                      action = "replace"
                      target_label = "dev_haondt_pod"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_container_name"]
                      action = "replace"
                      target_label = "dev_haondt_container"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_node_name"]
                      action = "replace"
                      target_label = "dev_haondt_node"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_part_of"]
                      action = "replace"
                      target_label = "dev_haondt_app"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                      action = "replace"
                      target_label = "dev_haondt_component"
                    }
                  }

                  loki.relabel "pod_logs" {
                    forward_to = [loki.process.pod_logs.receiver]
                  }

                  loki.process "pod_logs" {
                    stage.label_drop {
                      values = ["job", "instance", "service_name"]
                    }
                    forward_to = [loki.write.default.receiver]
                  }

              charon:
                enabled: true
                version: charon-k8s-job/v0.0.1
                repositories: &charon_repositories
                  default:
                    config_map:
                      repository: |-
                        max_snapshots: 10
                    secret:
                      repository: |-
                        password: "{{ VARIABLES.charon.repo_password }}"
                  gcs-gabbro:
                    config_map:
                      repository: |-
                        backend:
                          type: gcs_bucket
                          bucket: "{{ VARIABLES.charon.gcs.bucket }}"
                          credentials: /config/gcs/credentials.json
                    secret:
                      credentials.json: |-
                        {{ VARIABLES.charon.gcs.credentials | indent (24) }}
                  hzsb:
                    config_map:
                      repository: |-
                        backend:
                          type: rclone
                          rclone_config:
                            type: ftp
                            port: 21
                            explicit_tls: "true"
                    secret:
                      repository: |-
                        backend:
                          rclone_config:
                            host: "{{ VARIABLES.charon.hzsb.rclone.host }}"
                            user: "{{ VARIABLES.charon.hzsb.rclone.user }}"
                            pass: "{{ VARIABLES.charon.hzsb.rclone.pass }}"
              service_accounts:
                gitlab-deployments-marble:
                  roles:
                    - cluster-admin

        gabbro_cluster:
          hosts:
            gabbro:
              ansible_host: *gabbro_cluster_ip
              nvidia:
                enabled: true
          vars:
            ansible_user: gabbro
            ansible_ssh_private_key_file: build/id_rsa
            k3s_version: v1.33.3+k3s1
            k3s_node_name: "{% raw %}{{ inventory_hostname }}{% endraw %}"
            k3s_node_ip: "{% raw %}{{ ansible_host }}{% endraw %}"
            k3s_cluster_ip: *gabbro_cluster_ip
            k3s_pod_cidr: *default_pod_cidr
            k3s_cluster_control_plane_ip: "{% raw %}{{ k3s_cluster_ip }}{% endraw %}"
            k3s_server_config_yaml: |
              {% raw %}
              node-ip: "{{ ansible_host }}"
              disable: servicelb,traefik
              flannel-backend: none
              disable-network-policy: true
              cluster-cidr: "{{ k3s_pod_cidr }}"
              tls-san:
                - "{{ k3s_cluster_control_plane_ip }}"
              kubelet-arg: "allowed-unsafe-sysctls=net.ipv4.*,net.ipv6.*"
              {% endraw %}
            k3s_extra_server_args: "--secrets-encryption"
            kubernetes:
              kubeconfig: "~/.kube/config"
              context: gabbro_cluster
              cluster_ip: *gabbro_cluster_ip
              calico:
                enabled: true
                pod_cidr: *default_pod_cidr
              metallb:
                enabled: true
                ip_address_pool:
                  global:
                    - *gabbro_lb_ip_range
              ingress_nginx:
                # load_balancer_ip: *gabbro_cluster_ip
                enabled: true
                node_port:
                  enabled: true
                  http: 30080
                  https: 30443
              cert_manager:
                enabled: true
                acme_email: "{{ VARIABLES.cert_manager.acme_email }}"
                cloudflare_email: "{{ VARIABLES.cert_manager.cloudflare_email }}"
                cloudflare_api_token: "{{ VARIABLES.cert_manager.cloudflare_api_token }}"
                certificates:
                  haondt-dev-default:
                    dns_names: ['*.gabbro.local.haondt.dev', '*.haondt.dev']
              charon:
                enabled: true
                version: charon-k8s-job/v0.0.1
                repositories: *charon_repositories
              rathole:
                enabled: true
                version: rathole-operator/v0.0.3
                servers:
                  chert:
                    remote_addr: "{{ VARIABLES.rathole.chert.gabbro.remote_addr }}"
                    transport:
                      noise:
                        remote_public_key: "{{ VARIABLES.rathole.chert.gabbro.transport.noise.remote_public_key }}"
                    services:
                      haondt:
                        token: "{{ VARIABLES.rathole.chert.gabbro.services.haondt.token }}"
              alloy:
                enabled: true
                node_exporter:
                  enabled: true
                  mounts:
                    celery: /mnt/celery
                    pepper: /mnt/pepper
                    rhyolite: /mnt/rhyolite/gabbro
                config_controller:
                  enabled: true
                  version: alloy-config-controller/v0.0.1
                version: v1.2.1
                base_config: |
                  prometheus.remote_write "mimir" {
                    endpoint {
                      url = "https://mimir.basalt.local.haondt.dev/api/v1/push"
                    }
                    external_labels = {
                      dev_haondt_cluster = "gabbro_cluster",
                    }
                  }

                  loki.write "default" {
                    endpoint {
                      url = "https://loki.basalt.local.haondt.dev/loki/api/v1/push"
                    }
                    external_labels = {
                      dev_haondt_cluster = "gabbro_cluster",
                    }
                  }


                  // k8s nodes
                  discovery.kubernetes "nodes" {
                    role = "node"
                    selectors {
                      role = "node"
                      field = "metadata.name=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
                    }
                  }

                  prometheus.scrape "nodes" {
                    targets = discovery.kubernetes.nodes.targets
                    scheme = "https"
    
                    tls_config {
                      insecure_skip_verify = true
                    }
                    
                    authorization {
                      credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
                    }
                    
                    job_name = "kubelet"
                    metrics_path = "/metrics/resource"
                    forward_to = [prometheus.remote_write.mimir.receiver]
                  }

                  // node-exporter
                  prometheus.exporter.unix "node_exporter" {
                    set_collectors = [
                      "cpu",
                      "meminfo",
                      "diskstats",
                      "filesystem",
                      "time",
                      "stat",
                    ]
                  }

                  prometheus.scrape "node_exporter" {
                    targets = prometheus.exporter.unix.node_exporter.targets
                    forward_to = [prometheus.remote_write.mimir.receiver]
                  }

                  // dgcm-exporter
                  discovery.kubernetes "dcgm_exporter" {
                    role = "service"
                    selectors {
                      role = "service"
                      field = "metadata.name=dcgm-exporter,metadata.namespace=dcgm-exporter"
                    }
                  }
                  prometheus.scrape "dcgm_exporter" {
                    targets = discovery.kubernetes.dcgm_exporter.targets
                    forward_to = [prometheus.remote_write.mimir.receiver]
                  }

                  // pod logs
                  discovery.kubernetes "pod_logs" {
                    role = "pod"
                    selectors {
                      role = "pod"
                      field = "spec.nodeName=" + coalesce(sys.env("HOSTNAME"), constants.hostname)
                    }
                  }

                  discovery.relabel "pod_logs" {
                    targets = discovery.kubernetes.pod_logs.targets
                    rule {
                      source_labels = ["__meta_kubernetes_namespace"]
                      action = "replace"
                      target_label = "dev_haondt_namespace"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_name"]
                      action = "replace"
                      target_label = "dev_haondt_pod"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_container_name"]
                      action = "replace"
                      target_label = "dev_haondt_container"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_node_name"]
                      action = "replace"
                      target_label = "dev_haondt_node"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_part_of"]
                      action = "replace"
                      target_label = "dev_haondt_app"
                    }
                    rule {
                      source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
                      action = "replace"
                      target_label = "dev_haondt_component"
                    }
                  }

                  loki.relabel "pod_logs" {
                    forward_to = [loki.process.pod_logs.receiver]
                  }

                  loki.process "pod_logs" {
                    stage.label_drop {
                      values = ["job", "instance", "service_name"]
                    }
                    forward_to = [loki.write.default.receiver]
                  }

              service_accounts:
                gitlab-deployments-gabbro:
                  roles:
                    - cluster-admin
        basalt:
          hosts:
            basalt:
              ansible_host: *basalt_cluster_ip
          vars:
            ansible_user: basalt
            ansible_ssh_private_key_file: build/id_rsa
            k3s_version: v1.33.3+k3s1
            k3s_node_name: "{% raw %}{{ inventory_hostname }}{% endraw %}"
            k3s_node_ip: "{% raw %}{{ ansible_host }}{% endraw %}"
            k3s_cluster_ip: *basalt_cluster_ip
            k3s_pod_cidr: *default_pod_cidr
            k3s_cluster_control_plane_ip: "{% raw %}{{ k3s_cluster_ip }}{% endraw %}"
            k3s_server_config_yaml: |
              {% raw %}
              node-ip: "{{ ansible_host }}"
              disable: servicelb,traefik
              cluster-cidr: "{{ k3s_pod_cidr }}"
              tls-san:
                - "{{ k3s_cluster_control_plane_ip }}"
              {% endraw %}
            k3s_extra_server_args: "--secrets-encryption"
            kubernetes:
              kubeconfig: "~/.kube/config"
              cluster_name: basalt
              context: basalt
              cluster_ip: *basalt_cluster_ip
              ingress_nginx:
                load_balancer_ip: *basalt_cluster_ip
                enabled: true
                node_port:
                  enabled: false
                  http: 30080
                  https: 30443
              cert_manager:
                enabled: true
                acme_email: "{{ VARIABLES.cert_manager.acme_email }}"
                cloudflare_email: "{{ VARIABLES.cert_manager.cloudflare_email }}"
                cloudflare_api_token: "{{ VARIABLES.cert_manager.cloudflare_api_token }}"
                certificates:
                  haondt-dev-default:
                    dns_names: ['*.basalt.local.haondt.dev', '*.haondt.dev']
              metallb:
                enabled: true
                ip_address_pool:
                  global:
                    - *basalt_lb_ip_range
              charon:
                enabled: true
                version: charon-k8s-job/v0.0.1
                repositories: *charon_repositories
              gitlab_runner:
                enabled: true
                runner_token: "{{ VARIABLES.gitlab_runner.runner_token }}"
              rathole:
                enabled: true
                version: rathole-operator/v0.0.3
                servers:
                  chert:
                    remote_addr: "{{ VARIABLES.rathole.chert.basalt.remote_addr }}"
                    transport:
                      noise:
                        remote_public_key: "{{ VARIABLES.rathole.chert.basalt.transport.noise.remote_public_key }}"
                    services:
                      loki:
                        token: "{{ VARIABLES.rathole.chert.basalt.services.loki.token }}"
                        local_addr: grafana-loki-http.deployments-grafana.svc.cluster.local:8080
                      mimir:
                        token: "{{ VARIABLES.rathole.chert.basalt.services.mimir.token }}"
                        local_addr: grafana-mimir-http.deployments-grafana.svc.cluster.local:8080
              service_accounts:
                gitlab-deployments-basalt:
                  roles:
                    - cluster-admin


  vars:
    ssh:
      public_keys: *public_keys

  group_vars: {}
